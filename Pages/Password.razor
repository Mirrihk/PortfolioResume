@page "/password"
@layout MainLayout
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>Login</PageTitle>

<div class="page-container">
    <div class="responsive-panel login-layout">

        <div class="login-top">
            <h1>Portfolio</h1>
            <p class="subtitle">Log in to access your portfolio</p>

            <div class="logo-wrapper">
                <img src="images/C-Bass-logo-transparent.png" alt="C-Bass Logo" class="login-logo" />
            </div>


            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <p class="error">@ErrorMessage</p>
            }

            <!-- Optional middle content can go here -->
            <div class="login-middle">
                <p style="margin-top: 2rem;"><!-- Branding or animation goes here --></p>
            </div>
        </div>

        <div class="Yahoo-API">

        </div>

        <div class="login-bottom">
            <div class="alt-options">
                <button class="signup-btn" @onclick="GoToSignup">Sign Up</button>
                <button class="guest-btn" @onclick="LoginAnonymously">Continue as Guest</button>
            </div>

            <p class="alt-title">Or use your social account:</p>
            <button class="google-btn" @onclick="LoginWithGoogle">Sign in with Google</button>
            <button class="github-btn" @onclick="LoginWithGitHub">Sign in with GitHub</button>
        </div>



    </div>
</div>

@code {
    private string Username { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    private void GoToSignup() => Nav.NavigateTo("/signup");

    private async Task LoginWithGoogle()
    {
        try
        {
            var ok = await JS.InvokeAsync<bool>("authProvider.loginWithGoogle");
            if (ok) Nav.NavigateTo("/");
            else ErrorMessage = "Google sign-in failed.";
        }
        catch (Exception ex) { ErrorMessage = "Google sign-in error."; Console.WriteLine(ex); }
    }

    private async Task LoginWithGitHub()
    {
        try
        {
            var ok = await JS.InvokeAsync<bool>("authProvider.loginWithGitHub");
            if (ok) Nav.NavigateTo("/");
            else ErrorMessage = "GitHub sign-in failed.";
        }
        catch (Exception ex) { ErrorMessage = "GitHub sign-in error."; Console.WriteLine(ex); }
    }

    private async Task LoginAnonymously()
    {
        try
        {
            var ok = await JS.InvokeAsync<bool>("authProvider.loginAnonymously");
            if (ok) Nav.NavigateTo("/");
            else ErrorMessage = "Anonymous sign-in failed.";
        }
        catch (Exception ex) { ErrorMessage = "Anonymous sign-in error."; Console.WriteLine(ex); }
    }

}